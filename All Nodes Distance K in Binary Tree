class Solution {
public:
void markparent(TreeNode *root, unordered_map<TreeNode*,TreeNode*> &parent_track,TreeNode *target)
{
    queue<TreeNode *> q;
    q.push(root);
    
    while(!q.empty())
    {
        TreeNode *curr=q.front();
        q.pop();
        if(curr->left)
        {
            parent_track[curr->left]=curr;
            q.push(curr->left);
        }
        if(curr->right)
        {
            parent_track[curr->right]=curr;
            q.push(curr->right);
        }
    }
}
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) 
    {
        vector<int> res;
        unordered_map<TreeNode *,TreeNode *> parent_track;
        markparent(root,parent_track,target);
        unordered_map<TreeNode*,bool> visited;
        
        queue<TreeNode *>q;
        q.push(target);
        visited[target]=true;
        int curr_level=0;
        
        while(!q.empty())
        {
            int size=q.size();
            
            if(curr_level++==k)
                    break;
            
            for(int i=0;i<size;i++)
            {
                TreeNode *curr=q.front();
                q.pop();
                if(curr->left && visited[curr->left]==false)
                {
                    q.push(curr->left);
                    visited[curr->left]=true;
                }
                if(curr->right && visited[curr->right]==false)
                {
                    q.push(curr->right);
                    visited[curr->right]=true;
                }
                if(parent_track[curr] && visited[parent_track[curr]]==false)
                {
                    q.push(parent_track[curr]);
                    visited[parent_track[curr]]=true;
                }
            }
            
        }
        while(!q.empty())
            {
                TreeNode *temp=q.front();
                q.pop();
                res.push_back(temp->val);
            }
        return res;
    }
};
